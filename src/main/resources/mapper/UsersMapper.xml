<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- Mapper代理开发 约定： 1.namespace是接口地址 2.Mapper对应java接口类中方法名称和对应的mapper映射文件中元素的id属性值一致 
	3.Mapper对应java接口类中方发参数mapper映射文件中元素的parameterType属性值一致,返回类型和resultType类型一致 -->
<mapper namespace="examples.mybatis.mapper.UsersMapper">
	<select id="findUserById" parameterType="int" resultType="users">
		select
		id,username,password from users where id = #{id}
	</select>
	<!-- parameterType 输入参数类型 resultType 输出结果的类型（单条记录所映射的java对象） ${} 表示拼接符 安全隐患：SQL注入 
		不建议使用 #{} 表示占位符 -->
	<select id="findUsersByName" parameterType="string" resultType="users">
		select * from users where username like '%${value}%'
	</select>

	<insert id="addUser" parameterType="users">
		<!-- 返回主键 keyProperty:将查询到的主键值设置到parameterType指定的对象的哪个属性中 order:selectKey中SQL语句的执行顺序 
			resultType:指定返回类型 -->
		<selectKey keyProperty="id" order="AFTER" resultType="int">
			<!-- last_insert_id() 只能用于自增长 -->
			select last_insert_id()
		</selectKey>

		<!-- mysql使用 select uuid()来生成uuid主键 -->
		<!--先生成主键后再插入对应的脚本如下 -->
		<!-- <selectKey keyProperty="id" order="BEFORE" resultType="string"> select 
			uuid() </selectKey> insert into users (id,username,password) values(#{id},#{username},#{password}); -->
		insert into users (username,password) values(#{username},#{password});
	</insert>

	<update id="deleteUser" parameterType="int">
		delete from users where
		id=#{id};
	</update>
	<delete id="updateUser" parameterType="users">
		update users set
		username=#{username},password=#{password} where id=#{id}
	</delete>



	<!-- 通过ognl获取对象的属性值 -->
	<!-- <select id="findByUsersVo" parameterType="usersVo" resultType="users"> 
		select * from users where username like '%${user.username}%' and password 
		like '%${user.password}%' </select> 
		-->

	<!-- 动态sql -->
	<!-- where 拼接条件的时候会自动去掉最前面的and -->
	<!-- 
	<select id="findByUsersVo" parameterType="usersVo" resultType="users">
		select * from users 
		<where>
			<if test="user!=null">
				<if test="user.username!=null">
					and username like '%${user.username}%'
				</if>
				<if test="user.password!=null">
					and password like '%${user.password}%'
				</if>
			</if>
		</where>
	</select>
	 
	<select id="findUserCountsByUsersVo" parameterType="usersVo"
		resultType="int">
		select count(*) from users
		<where>
			<if test="user!=null">
				<if test="user.username!=null">
					and username like '%${user.username}%'
				</if>
				<if test="user.password!=null">
					and password like '%${user.password}%'
				</if>
			</if>
		</where>
	</select>
	-->
	
	<!-- 
		sql片段 
		经验
		1.基于单表的查询sql:提高sql代码的可重用性
		2.不加入where 
	-->
	<sql id="query_users_where">
		<if test="user!=null">
				<if test="user.username!=null">
					and username like '%${user.username}%'
				</if>
				<if test="user.password!=null">
					and password like '%${user.password}%'
				</if>
		</if>
		<if test="ids!=null">
			
			<!-- 
				and (id=1 or id=2  or id = 3)
				collection="ids" 	被遍历的对象
				open  				开始拼接内容
				close 				末尾拼接内容
				separator 			遍历过程要拼接的串
			 -->
			<foreach collection="ids" item="id" open="and (" close=")" separator="or">
				id=#{id}
			</foreach>
			
			
			<!-- 
				and id in(1,2,3)
			 -->
			<foreach collection="ids" item="id" open="and id in(" close=")" separator=",">
				#{id}
			</foreach>
			
		</if>
	</sql>
	<select id="findByUsersVo" parameterType="usersVo" resultType="users">
		select * from users 
		<where>
			<!-- 引入sql片段 语法：namespace.sqlid-->
			<include refid="query_users_where"></include>
		</where>
	</select>
	<select id="findUserCountsByUsersVo" parameterType="usersVo" resultType="int">
		select count(*) from users 
		<where>
			<!-- 引入sql片段 语法：namespace.sqlid-->
			<include refid="query_users_where"></include>
		</where>
	</select>
</mapper>